---
---

<div id="render">

</div>

<script>
    import * as THREE from 'three';

    var cycle = 0;
    var dWidth, dHeight;
    var offsetTop, offsetLeft;
    let mouse = new THREE.Vector2();
    const height = 500
    const width = 2000
    const raycaster = new THREE.Raycaster();

    const scene = new THREE.Scene();
    const scene2 = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera( 45, width / height, 0.1, 1000 );

    const renderer = new THREE.WebGLRenderer();
    renderer.setSize( width, height );
    //document.body.appendChild( renderer.domElement );
    const renderTo = document.getElementById('render');
    //document.getElementById('render')?.appendChild(renderer.domElement)
    renderTo.appendChild(renderer.domElement);
    renderTo.addEventListener('mousemove', onMouseMove, false);

    const shader = new THREE.ShaderMaterial({
        uniforms: {
            col: {value: new THREE.Vector3(0.6, 0.6, 0.3)},
            viewPos: {value: new THREE.Vector3(0.0, 0.0, 5.0)},
            rotationX: {value: new THREE.Matrix4().makeRotationX(0.2)},
            rotationY: {value: new THREE.Matrix4().makeRotationY(0.2)},
            translation: {value: new THREE.Vector3(0.0, 0.0, 0.0)},
            rotateStatus: {value: 1}
        },
        vertexShader: vertexShader(),
        fragmentShader: fragmentShader(),
        glslVersion: THREE.GLSL3
    });

    const geo = new THREE.BufferGeometry();

    const vertices = new Float32Array( [
        -1.0, -1.0,  0.0, // v0
        1.0, -1.0,  0.0, // v1
        1.0,  1.0,  0.0, // v2
        -1.0,  1.0,  0.0, // v3
    ]);

    const normals = new Float32Array( [
        -1.0, -1.0,  1.0, // v0
        1.0, -1.0,  1.0, // v1
        1.0,  1.0,  1.0, // v2
        -1.0,  1.0,  1.0, // v3
    ]);

    const indices = [
        0, 1, 2,
        2, 3, 0,
    ];

    geo.setIndex( indices );
    geo.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
    geo.setAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );

    var light = new THREE.AmbientLight(0x404040);
    scene.add(light);
    
    const geometry = new THREE.BoxGeometry( 1, 1, 1 );
    const material = new THREE.MeshPhongMaterial( { color: 0x00ff00 } );
    //const cube = new THREE.Mesh( geometry, material );
    const cube = new THREE.Mesh( geometry, material );
    const shape = new THREE.Mesh(geo, material);
    
    scene.add( cube );
    scene.add( shape );

    camera.position.z = 5;
    var rot = 0.01;
    var renderState = 0;

    function animate() {
        requestAnimationFrame( animate );

        // cube.material.uniforms.rotationX.value = new THREE.Matrix4().makeRotationX(rot += 0.01);
        // cube.material.uniforms.rotationY.value = new THREE.Matrix4().makeRotationY(rot);
        // shape.material.uniforms.rotateStatus.value = 0;
        cube.rotateX(0.01);

        checkResize();

        raycaster.setFromCamera( mouse, camera );
        const intersects = raycaster.intersectObjects( scene.children);
        //intersects[0].object.material.color.set( 0xffffff );

        if(intersects.length != 0){
            console.log(intersects[0].object.material.uuid);
            //cube.material.uniforms.col.value = new THREE.Vector3(0.0, 1.0, 0.0);
            //intersects[0].object.material.uniforms.col.value = new THREE.Vector3(0.0, 1.0, 0.0);
            //console.log(intersects[0].object.material.uuid);
            cube.material.color = new THREE.Color(0xff0000);
        }else{
            //cube.material.uniforms.col.value = new THREE.Vector3(0.45, 0.45, 0.2);
            cube.material.color = new THREE.Color(0xffff00);
        }

        if(cycle < 30){
            cycle++;
        }else{
            offsetTop = renderTo.getBoundingClientRect().top;
            offsetLeft = renderTo.getBoundingClientRect().left;
            camera.aspect = dWidth / dHeight;
            camera.updateProjectionMatrix();
            cycle = 0;
        }
        renderer.setSize( dWidth, dHeight );
        renderer.autoClear = true;
        renderer.render(scene, camera);
        renderer.autoClear = false;
        //renderer.clearDepth();
        //renderer.render(scene2, camera);
        // renderer.setSize( dWidth, dHeight );
        // if(renderState = 0){
        //     renderer.render( scene, camera );
        //     renderState = 1;
        // }else{
        //     renderer.render( scene2, camera );
        //     renderState = 0;
        // }
    }

    animate();

    function onMouseMove(event){
        event.preventDefault();
        mouse.x = ((event.clientX - offsetLeft) / dWidth) * 2 - 1;
        mouse.y = -((event.clientY - offsetTop) / dHeight) * 2 + 1;
    }

    function checkResize(){
        dWidth = renderTo.clientWidth;
        dHeight = renderTo.clientHeight;
    }

    function vertexShader() {
        return `
            uniform vec3 col;
            uniform mat4 rotationX;
            uniform mat4 rotationY;
            uniform vec3 translation;
            uniform int rotateStatus;
            
            varying vec3 vUv;
            vec3 modelPos;

            out vec3 pos;
            out vec3 FragPos;
            out vec3 aNormal;

            mat4 rotate = mat4(1.0);

            void main() {
                if(rotateStatus == 1){
                    rotate = rotationX * rotationY;
                    aNormal = vec4(vec4(normal, 1.0) * rotate).xyz;
                    modelPos = vec3(vec4(position, 1.0) * rotate) + translation;
                }else{
                    modelPos = position;
                    aNormal = normal;
                }
                vUv = position; 
                //vec4 modelViewPosition = modelViewMatrix * (vec4(position, 1.0) * rotate);
                //FragPos = vec3(1.0 * vec4(position, 1.0));
                vec4 modelViewPosition = modelViewMatrix * vec4(modelPos, 1.0);
                FragPos = vec3(1.0 * vec4(modelPos, 1.0));
                gl_Position = projectionMatrix * modelViewPosition; 
            }
        `
    }
    function fragmentShader(){
        return ` 
            uniform vec3 col;
            uniform vec3 viewPos; 
            varying vec3 vUv;

            in vec3 FragPos;
            in vec3 aNormal;

            out vec4 FragColor;

            vec3 lightPos = vec3(4.0, 4.0, 4.0);
            vec3 lightDir = vec3(2.0, 2.0, 2.0);
            vec3 lightColor = vec3(1.0, 1.0, 1.0);

            void main() {
                // diffuse 
                vec3 norm = normalize(aNormal);
                vec3 lightDir = normalize(lightPos - FragPos);
                float diff = max(dot(norm, lightDir), 0.2);
                vec3 diffuse = diff * lightColor;
                
                // specular
                float specularStrength = 0.7;
                vec3 viewDir = normalize(viewPos - FragPos);
                vec3 reflectDir = reflect(-lightDir, norm);
                float tes = max(dot(viewDir, reflectDir), 0.0);
                //float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
                float spec = tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes * tes;
                vec3 specular = specularStrength * spec * lightColor;

                //ambient
                float ambientStrength = 0.1;
                vec3 ambient = ambientStrength * lightColor;

                vec3 result = (ambient + diffuse + specular) * col;
                //gl_FragColor = vec4(result, 1.0);
                FragColor = vec4(result, 1.0);
            }
        `
    }
</script>

<style>
    #render{
        position: relative;
        width: 100%;
        height: 100%;
    }
</style>